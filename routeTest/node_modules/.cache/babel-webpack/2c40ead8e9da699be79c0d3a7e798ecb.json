{"ast":null,"code":"import _asyncToGenerator from \"/Users/poongkuzhalig/Documents/Training_code/routeTest/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BIKES } from './bike-store';\nimport * as i0 from \"@angular/core\";\nexport class BikeService {\n  constructor() {}\n\n  getBike(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const bikes = yield _this.getBikes();\n      const bike = bikes.find(bike => bike.id === id);\n      return bike;\n    })();\n  }\n\n  getBikes() {\n    return Promise.resolve(BIKES);\n  }\n\n}\n\nBikeService.ɵfac = function BikeService_Factory(t) {\n  return new (t || BikeService)();\n};\n\nBikeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BikeService,\n  factory: BikeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/poongkuzhalig/Documents/Training_code/routeTest/src/app/bike-service.service.ts"],"names":["BIKES","i0","BikeService","constructor","getBike","id","bikes","getBikes","bike","find","Promise","resolve","ɵfac","BikeService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,KAAT,QAAsB,cAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,GAAG,CAAG;;AACXC,EAAAA,OAAO,CAACC,EAAD,EAAK;AAAA;;AAAA;AACd,YAAMC,KAAK,SAAS,KAAI,CAACC,QAAL,EAApB;AACA,YAAMC,IAAI,GAAGF,KAAK,CAACG,IAAN,CAAYD,IAAD,IAAUA,IAAI,CAACH,EAAL,KAAYA,EAAjC,CAAb;AACA,aAAOG,IAAP;AAHc;AAIjB;;AACDD,EAAAA,QAAQ,GAAG;AACP,WAAOG,OAAO,CAACC,OAAR,CAAgBX,KAAhB,CAAP;AACH;;AAToB;;AAWzBE,WAAW,CAACU,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIZ,WAAV,GAAP;AAAkC,CAAvF;;AACAA,WAAW,CAACa,KAAZ,GAAoB,aAAcd,EAAE,CAACe,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEf,WAAT;AAAsBgB,EAAAA,OAAO,EAAEhB,WAAW,CAACU,IAA3C;AAAiDO,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { BIKES } from './bike-store';\nimport * as i0 from \"@angular/core\";\nexport class BikeService {\n    constructor() { }\n    async getBike(id) {\n        const bikes = await this.getBikes();\n        const bike = bikes.find((bike) => bike.id === id);\n        return bike;\n    }\n    getBikes() {\n        return Promise.resolve(BIKES);\n    }\n}\nBikeService.ɵfac = function BikeService_Factory(t) { return new (t || BikeService)(); };\nBikeService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: BikeService, factory: BikeService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}